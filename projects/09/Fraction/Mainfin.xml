<class>
 <keyword> class </keyword>
 <identifier> Main </identifier>
 <symbol> { </symbol>
 <subroutineDec>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <varDec>
    <keyword> var </keyword>
    <identifier> Fraction </identifier>
    <identifier> a </identifier>
    <symbol> , </symbol>
    <identifier> b </identifier>
    <symbol> , </symbol>
    <identifier> c </identifier>
    <symbol> ; </symbol>
   </varDec>
   <statements>
    <letStatement>
     <keyword> let </keyword>
     <identifier> a </identifier>
     <symbol> = </symbol>
     <expression>
      <term>
       <identifier> Fraction </identifier>
       <symbol> . </symbol>
       <identifier> new </identifier>
       <symbol> ( </symbol>
       <expressionList>
        <expression>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
        <symbol> , </symbol>
        <expression>
         <term>
          <integerConstant> 3 </integerConstant>
         </term>
        </expression>
       </expressionList>
       <symbol> ) </symbol>
      </term>
     </expression>
     <symbol> ; </symbol>
    </letStatement>
    <letStatement>
     <keyword> let </keyword>
     <identifier> b </identifier>
     <symbol> = </symbol>
     <expression>
      <term>
       <identifier> Fraction </identifier>
       <symbol> . </symbol>
       <identifier> new </identifier>
       <symbol> ( </symbol>
       <expressionList>
        <expression>
         <term>
          <integerConstant> 1 </integerConstant>
         </term>
        </expression>
        <symbol> , </symbol>
        <expression>
         <term>
          <integerConstant> 5 </integerConstant>
         </term>
        </expression>
       </expressionList>
       <symbol> ) </symbol>
      </term>
     </expression>
     <symbol> ; </symbol>
    </letStatement>
    <letStatement>
     <keyword> let </keyword>
     <identifier> c </identifier>
     <symbol> = </symbol>
     <expression>
      <term>
       <identifier> a </identifier>
       <symbol> . </symbol>
       <identifier> plus </identifier>
       <symbol> ( </symbol>
       <expressionList>
        <expression>
         <term>
          <identifier> b </identifier>
         </term>
        </expression>
       </expressionList>
       <symbol> ) </symbol>
      </term>
     </expression>
     <symbol> ; </symbol>
    </letStatement>
    <doStatement>
     <keyword> do </keyword>
     <identifier> c </identifier>
     <symbol> . </symbol>
     <identifier> print </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <symbol> } </symbol>
</class>
