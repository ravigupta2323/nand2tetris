// Hackenstein-3D: Escape from Castle Hackenstein part 2
// by James Leibert February 2017

// Player Class maintains the current position and orientation of the
// player and prevents movement through walls.
// It also performs a number of calculations that make the ray casting
// easier, which should only be performed once when the orientation or
// location of the player changes

// Because we want to use the player properties, and because there is
// only one instance of the class, it is more convenient to store
// data in static fields rather than instances which would require
// at least one additional level of indirection

/** Maintains the location and orientation of the player*/
class Player {

    // Lookup Tables for orientation
    static Array sinTable, cosTable;
    static Array stepX, stepY;

    // Movement Array Reference.
    // The Walls class has to tell us which walls not to walk through.
    // The array is provided by pointer reference via int-casting 
    static int roomPaths;
    
    // The player's location is stored in two parts, the grid square
    // they are in and the position within that grid square in 1/64ths
    // of a grid square. This makes some of the maths in the ray casting
    // a little simpler, since dividing by powers of two isn't cheap.
    static int xRoom, xPos;
    static int yRoom8, yRoom, yPos;

    // Orientation is stored in two separate ways
    // The angle is stored in 64ths of a complete revolution
    // We also cache the sin and cos of the angle (in 64ths)
    // to help out the ray casting algorithm in Walls
    // Finally we also cache the amount of x and y movement when we
    // step forward to avoid recalculation when moving
    static int orientation;
    static int sinVal, cosVal;
    static int xstep, ystep;

    /** Initialise the lookup tables */
    function void init(int xR, int xP, int yR, int yP, int o, int pathsRef) {

	var int i;
	
	// Initialise the sin and cos tables and step tables
	// These are code generated by a Python script
	let cosTable = Array.new(64); let sinTable = Array.new(64);
	let stepX = Array.new(64); let stepY = Array.new(64);
	
        let cosTable[0] = 64; let cosTable[1] = 63; let cosTable[2] = 62; let cosTable[3] = 61; 
        let cosTable[4] = 59; let cosTable[5] = 56; let cosTable[6] = 53; let cosTable[7] = 49; 
        let cosTable[8] = 45; let cosTable[9] = 40; let cosTable[10] = 35; let cosTable[11] = 30; 
        let cosTable[12] = 24; let cosTable[13] = 18; let cosTable[14] = 12; let cosTable[15] = 6; 
        let cosTable[16] = 0; let cosTable[17] = -6; let cosTable[18] = -12; let cosTable[19] = -18; 
        let cosTable[20] = -24; let cosTable[21] = -30; let cosTable[22] = -35; let cosTable[23] = -40; 
        let cosTable[24] = -45; let cosTable[25] = -49; let cosTable[26] = -53; let cosTable[27] = -56; 
        let cosTable[28] = -59; let cosTable[29] = -61; let cosTable[30] = -62; let cosTable[31] = -63; 
        let cosTable[32] = -64; let cosTable[33] = -63; let cosTable[34] = -62; let cosTable[35] = -61; 
        let cosTable[36] = -59; let cosTable[37] = -56; let cosTable[38] = -53; let cosTable[39] = -49; 
        let cosTable[40] = -45; let cosTable[41] = -40; let cosTable[42] = -35; let cosTable[43] = -30; 
        let cosTable[44] = -24; let cosTable[45] = -18; let cosTable[46] = -12; let cosTable[47] = -6; 
        let cosTable[48] = 0; let cosTable[49] = 6; let cosTable[50] = 12; let cosTable[51] = 18; 
        let cosTable[52] = 24; let cosTable[53] = 30; let cosTable[54] = 35; let cosTable[55] = 40; 
        let cosTable[56] = 45; let cosTable[57] = 49; let cosTable[58] = 53; let cosTable[59] = 56; 
        let cosTable[60] = 59; let cosTable[61] = 61; let cosTable[62] = 62; let cosTable[63] = 63; 
        let sinTable[0] = 0; let sinTable[1] = 6; let sinTable[2] = 12; let sinTable[3] = 18; 
        let sinTable[4] = 24; let sinTable[5] = 30; let sinTable[6] = 35; let sinTable[7] = 40; 
        let sinTable[8] = 45; let sinTable[9] = 49; let sinTable[10] = 53; let sinTable[11] = 56; 
        let sinTable[12] = 59; let sinTable[13] = 61; let sinTable[14] = 62; let sinTable[15] = 63; 
        let sinTable[16] = 64; let sinTable[17] = 63; let sinTable[18] = 62; let sinTable[19] = 61; 
        let sinTable[20] = 59; let sinTable[21] = 56; let sinTable[22] = 53; let sinTable[23] = 49; 
        let sinTable[24] = 45; let sinTable[25] = 40; let sinTable[26] = 35; let sinTable[27] = 30; 
        let sinTable[28] = 24; let sinTable[29] = 18; let sinTable[30] = 12; let sinTable[31] = 6; 
        let sinTable[32] = 0; let sinTable[33] = -6; let sinTable[34] = -12; let sinTable[35] = -18; 
        let sinTable[36] = -24; let sinTable[37] = -30; let sinTable[38] = -35; let sinTable[39] = -40; 
        let sinTable[40] = -45; let sinTable[41] = -49; let sinTable[42] = -53; let sinTable[43] = -56; 
        let sinTable[44] = -59; let sinTable[45] = -61; let sinTable[46] = -62; let sinTable[47] = -63; 
        let sinTable[48] = -64; let sinTable[49] = -63; let sinTable[50] = -62; let sinTable[51] = -61; 
        let sinTable[52] = -59; let sinTable[53] = -56; let sinTable[54] = -53; let sinTable[55] = -49; 
        let sinTable[56] = -45; let sinTable[57] = -40; let sinTable[58] = -35; let sinTable[59] = -30; 
        let sinTable[60] = -24; let sinTable[61] = -18; let sinTable[62] = -12; let sinTable[63] = -6; 
        let stepX[0] = 0; let stepX[1] = 0; let stepX[2] = 1; let stepX[3] = 1; 
        let stepX[4] = 2; let stepX[5] = 3; let stepX[6] = 3; let stepX[7] = 4; 
        let stepX[8] = 4; let stepX[9] = 4; let stepX[10] = 5; let stepX[11] = 5; 
        let stepX[12] = 5; let stepX[13] = 6; let stepX[14] = 6; let stepX[15] = 6; 
        let stepX[16] = 6; let stepX[17] = 6; let stepX[18] = 6; let stepX[19] = 6; 
        let stepX[20] = 5; let stepX[21] = 5; let stepX[22] = 5; let stepX[23] = 4; 
        let stepX[24] = 4; let stepX[25] = 4; let stepX[26] = 3; let stepX[27] = 3; 
        let stepX[28] = 2; let stepX[29] = 1; let stepX[30] = 1; let stepX[31] = 0; 
        let stepX[32] = 0; let stepX[33] = 0; let stepX[34] = -1; let stepX[35] = -1; 
        let stepX[36] = -2; let stepX[37] = -3; let stepX[38] = -3; let stepX[39] = -4; 
        let stepX[40] = -4; let stepX[41] = -4; let stepX[42] = -5; let stepX[43] = -5; 
        let stepX[44] = -5; let stepX[45] = -6; let stepX[46] = -6; let stepX[47] = -6; 
        let stepX[48] = -6; let stepX[49] = -6; let stepX[50] = -6; let stepX[51] = -6; 
        let stepX[52] = -5; let stepX[53] = -5; let stepX[54] = -5; let stepX[55] = -4; 
        let stepX[56] = -4; let stepX[57] = -4; let stepX[58] = -3; let stepX[59] = -3; 
        let stepX[60] = -2; let stepX[61] = -1; let stepX[62] = -1; let stepX[63] = 0; 
        let stepY[0] = 6; let stepY[1] = 6; let stepY[2] = 6; let stepY[3] = 6; 
        let stepY[4] = 5; let stepY[5] = 5; let stepY[6] = 5; let stepY[7] = 4; 
        let stepY[8] = 4; let stepY[9] = 4; let stepY[10] = 3; let stepY[11] = 3; 
        let stepY[12] = 2; let stepY[13] = 1; let stepY[14] = 1; let stepY[15] = 0; 
        let stepY[16] = 0; let stepY[17] = 0; let stepY[18] = -1; let stepY[19] = -1; 
        let stepY[20] = -2; let stepY[21] = -3; let stepY[22] = -3; let stepY[23] = -4; 
        let stepY[24] = -4; let stepY[25] = -4; let stepY[26] = -5; let stepY[27] = -5; 
        let stepY[28] = -5; let stepY[29] = -6; let stepY[30] = -6; let stepY[31] = -6; 
        let stepY[32] = -6; let stepY[33] = -6; let stepY[34] = -6; let stepY[35] = -6; 
        let stepY[36] = -5; let stepY[37] = -5; let stepY[38] = -5; let stepY[39] = -4; 
        let stepY[40] = -4; let stepY[41] = -4; let stepY[42] = -3; let stepY[43] = -3; 
        let stepY[44] = -2; let stepY[45] = -1; let stepY[46] = -1; let stepY[47] = 0; 
        let stepY[48] = 0; let stepY[49] = 0; let stepY[50] = 1; let stepY[51] = 1; 
        let stepY[52] = 2; let stepY[53] = 3; let stepY[54] = 3; let stepY[55] = 4; 
        let stepY[56] = 4; let stepY[57] = 4; let stepY[58] = 5; let stepY[59] = 5; 
        let stepY[60] = 5; let stepY[61] = 6; let stepY[62] = 6; let stepY[63] = 6; 

	// Initialise the room movement table from the supplied table
	// We only maintain a reference to the source and hope (!) that
	// the table isn't destroyed while we are using it!
	let roomPaths = pathsRef;

	// Initialise location and orientation
	let xRoom = xR; let xPos = xP;
	let yRoom8 = (yR * 8); let yRoom = yR; let yPos = yP;
	let orientation = o;

	// Ensure the tables are initialised before we try to render anything
	do Player.reOrient(0);
	do Player.reLocate(0);

	return;
    }

    //** Move the player checking whether the path is clear*/
    function void reLocate(int steps) {
	var int roomLookup;
	var boolean moved;
	var int nxRoom, nxPos, nyRoom8, nyRoom, nyPos;

	// Calculate where moving would move us to
	let nxRoom = xRoom; let nyRoom8 = yRoom8; let nyRoom = yRoom;
	let nxPos = xPos + (xstep * steps); let nyPos = yPos + (ystep * steps);

	// Check movement between rooms allowed in the maze configuration
	let roomLookup = (xRoom + yRoom8)*4; let moved = true;
	while (nxPos > 63) {
	    if (~(roomPaths[roomLookup + 3])) { let moved = false; }
	    let nxRoom = nxRoom + 1; let nxPos = nxPos - 64;
	}
	while (nxPos < 0) {
	    if (~(roomPaths[roomLookup + 2])) { let moved = false; }
	    let nxRoom = nxRoom - 1; let nxPos = nxPos + 64;
	}
	while (nyPos > 63) {
	    if (~(roomPaths[roomLookup + 0])) { let moved = false; }
	    let nyRoom8 = nyRoom8 + 8; let nyRoom = nyRoom + 1; let nyPos = nyPos - 64;
	}
	while (nyPos < 0) {
	    if (~(roomPaths[roomLookup + 1])) { let moved = false; }
	    let nyRoom8 = nyRoom8 - 8; let nyRoom = nyRoom - 1; let nyPos = nyPos + 64;
	}

	// Update our position if it was OK
	if (moved) {
	    let xRoom = nxRoom; let yRoom8 = nyRoom8; let yRoom = nyRoom;
	    let xPos = nxPos; let yPos = nyPos;
	}
	
	return;
    }

    /** Rotate the player and update the rotation tables */
    function void reOrient(int rot) {

	// Change our orientation
	let orientation = orientation + rot;
	if (orientation < 0) { let orientation = orientation + 64; }
	if (orientation > 63) { let orientation = orientation - 64; }

	// Recalculate the cache values
	let cosVal = cosTable[orientation];
	let sinVal = sinTable[orientation];
	let xstep = stepX[orientation];
	let ystep = stepY[orientation];

	return;
    }

    /** Put location into an array */
    function void getLocation(int locArray) {
	
	// Send 7 key location/orientation values back in an array
	// provided by the caller (dangerous! as must be sufficient room)
	let locArray[0] = xRoom;
	let locArray[1] = xPos;
	let locArray[2] = yRoom;
	let locArray[3] = yPos;
	let locArray[4] = orientation;
	let locArray[5] = cosVal;
	let locArray[6] = sinVal;
	return;
    }

    /** Get which room we are in */
    function int roomNum() {
	return (xRoom + yRoom8);
    }
    
    /** Clean up the lookup tables */
    function void cleanup() {

	// Clear all the arrays initialised by init
	do sinTable.dispose();
	do cosTable.dispose();
	do stepX.dispose();
	do stepY.dispose();
	return;
    }
    
}
